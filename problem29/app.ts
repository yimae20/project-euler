/* 
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */

// a^bの値が被る可能性があるaをa'とし、配列に代入する関数
// a^b = 4^2 => (2^2)^2 => 2^4
// つまり、4^nは2の乗数である
// a' = i^j  => 2^1,2^2,2^3,2^4,・・・,3^1,3^2,・・・のように配列に代入（i^j <= aまで、4^1,4^2・・・,8^1,9^1等はかぶるので代入しない）
function getADashNumbers(limitNumber: number): number[][] {
  const aDashNumbers = [];
  const tmpArr: number[] = [];
  for (let i = 2; i <= Math.sqrt(limitNumber); i++) {
    for (let j = 1; Math.pow(i, j) <= limitNumber; j++) {
      const tmpValue = Math.pow(i, j);
      if (!tmpArr.includes(tmpValue)) {
        tmpArr.push(tmpValue);
        aDashNumbers.push([i, j]);
      }
    }
  }
  return aDashNumbers;
}

// (a,b) = (1000,1000)までは計算できる
// (a,b) = (10000,10000)はa'が多くなるため厳しい
function countDistinctPowers(numberA: number, numberB: number): number {
  const distinctValues: string[] = [];
  const aDashNumbers = getADashNumbers(numberA);
  const aDashNumbersLength = aDashNumbers.length;
  for (let i = 0; i < aDashNumbersLength; i++) {
    const aDash = aDashNumbers[i];
    for (let b = 2; b <= numberB; b++) {
      // 4^5は  a=4 => a'=(2^2),b=5なので'2^10'となる。
      // もしすでに'2^10'がdistinctValuesに代入されていれば破棄、
      // 代入されていなければ'2^10'と文字列で代入する
      const tmpValue = `${aDash[0]}^${aDash[1] * b}`;
      if (!distinctValues.includes(tmpValue)) {
        distinctValues.push(tmpValue);
      }
    }
  }
  const ansCount = distinctValues.length + (numberA - 1 - aDashNumbersLength) * (numberB - 1);
  return ansCount;
}

console.log(`2 ≤ a ≤ 100 と 2 ≤ b ≤ 100の範囲でa^bが異なる値となる数は${countDistinctPowers(100, 100)}です。`);
